class Solution:
    def getDirections(self, root: Optional[TreeNode], startValue: int, destValue: int) -> str:
        # Helper function to find the LCA of two nodes
        def findLCA(root, p, q):
            if not root:
                return None
            if root.val == p or root.val == q:
                return root
            left = findLCA(root.left, p, q)
            right = findLCA(root.right, p, q)
            if left and right:
                return root
            return left if left else right
        
        # Helper function to find the path from root to the given target node
        def findPath(root, target, path):
            if not root:
                return False
            if root.val == target:
                return True
            path.append('L')
            if findPath(root.left, target, path):
                return True
            path.pop()
            path.append('R')
            if findPath(root.right, target, path):
                return True
            path.pop()
            return False
        
        lca = findLCA(root, startValue, destValue)
        
        path_to_start = []
        path_to_dest = []
        
        findPath(lca, startValue, path_to_start)
        findPath(lca, destValue, path_to_dest)
        
        # All steps to startValue will be 'U' from the LCA
        path_to_start = ['U'] * len(path_to_start)
        
        # Concatenate paths
        return ''.join(path_to_start) + ''.join(path_to_dest)
